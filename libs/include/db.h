/* db.h generated by valac 0.26.0, the Vala compiler, do not modify */


#ifndef __DB_H__
#define __DB_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <sqlite3.h>
#include <gee.h>

G_BEGIN_DECLS


#define DB_TYPE_DATABASE (db_database_get_type ())
#define DB_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DB_TYPE_DATABASE, DBDatabase))
#define DB_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DB_TYPE_DATABASE))
#define DB_DATABASE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DB_TYPE_DATABASE, DBDatabaseIface))

typedef struct _DBDatabase DBDatabase;
typedef struct _DBDatabaseIface DBDatabaseIface;

#define DB_TYPE_ENTITY (db_entity_get_type ())
#define DB_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DB_TYPE_ENTITY, DBEntity))
#define DB_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DB_TYPE_ENTITY, DBEntityClass))
#define DB_IS_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DB_TYPE_ENTITY))
#define DB_IS_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DB_TYPE_ENTITY))
#define DB_ENTITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DB_TYPE_ENTITY, DBEntityClass))

typedef struct _DBEntity DBEntity;
typedef struct _DBEntityClass DBEntityClass;

#define DB_TYPE_SQ_LITE_DATABASE (db_sq_lite_database_get_type ())
#define DB_SQ_LITE_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DB_TYPE_SQ_LITE_DATABASE, DBSQLiteDatabase))
#define DB_SQ_LITE_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DB_TYPE_SQ_LITE_DATABASE, DBSQLiteDatabaseClass))
#define DB_IS_SQ_LITE_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DB_TYPE_SQ_LITE_DATABASE))
#define DB_IS_SQ_LITE_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DB_TYPE_SQ_LITE_DATABASE))
#define DB_SQ_LITE_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DB_TYPE_SQ_LITE_DATABASE, DBSQLiteDatabaseClass))

typedef struct _DBSQLiteDatabase DBSQLiteDatabase;
typedef struct _DBSQLiteDatabaseClass DBSQLiteDatabaseClass;
typedef struct _DBSQLiteDatabasePrivate DBSQLiteDatabasePrivate;
typedef struct _DBEntityPrivate DBEntityPrivate;

#define DB_TYPE_SIMPLE_ENTITY (db_simple_entity_get_type ())
#define DB_SIMPLE_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DB_TYPE_SIMPLE_ENTITY, DBSimpleEntity))
#define DB_SIMPLE_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DB_TYPE_SIMPLE_ENTITY, DBSimpleEntityClass))
#define DB_IS_SIMPLE_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DB_TYPE_SIMPLE_ENTITY))
#define DB_IS_SIMPLE_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DB_TYPE_SIMPLE_ENTITY))
#define DB_SIMPLE_ENTITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DB_TYPE_SIMPLE_ENTITY, DBSimpleEntityClass))

typedef struct _DBSimpleEntity DBSimpleEntity;
typedef struct _DBSimpleEntityClass DBSimpleEntityClass;
typedef struct _DBSimpleEntityPrivate DBSimpleEntityPrivate;

struct _DBDatabaseIface {
	GTypeInterface parent_iface;
	void (*exec_sql) (DBDatabase* self, const gchar* sql, sqlite3_callback callback, void* callback_target);
	gint64 (*last_insert_rowid) (DBDatabase* self);
};

struct _DBSQLiteDatabase {
	GObject parent_instance;
	DBSQLiteDatabasePrivate * priv;
};

struct _DBSQLiteDatabaseClass {
	GObjectClass parent_class;
};

struct _DBEntity {
	GObject parent_instance;
	DBEntityPrivate * priv;
};

struct _DBEntityClass {
	GObjectClass parent_class;
	const gchar* (*db_table) (DBEntity* self);
	gchar** (*db_keys) (DBEntity* self, int* result_length1);
	gchar** (*db_fields) (DBEntity* self, int* result_length1);
	void (*remove) (DBEntity* self);
};

struct _DBSimpleEntity {
	DBEntity parent_instance;
	DBSimpleEntityPrivate * priv;
};

struct _DBSimpleEntityClass {
	DBEntityClass parent_class;
};


GType db_database_get_type (void) G_GNUC_CONST;
void db_database_exec_sql (DBDatabase* self, const gchar* sql, sqlite3_callback callback, void* callback_target);
gint64 db_database_last_insert_rowid (DBDatabase* self);
gchar* db_database_build_select_query (DBDatabase* self, const gchar* table, const gchar* columns, const gchar* where, const gchar* order_by, gint limit, const gchar* extra);
gchar* db_database_fetch_string (DBDatabase* self, const gchar* table, const gchar* column, const gchar* where);
gint db_database_fetch_int (DBDatabase* self, const gchar* table, const gchar* column, const gchar* where);
gint64 db_database_fetch_int64 (DBDatabase* self, const gchar* table, const gchar* column, const gchar* where);
gint64 db_database_query_count (DBDatabase* self, const gchar* table, const gchar* where);
gint64 db_database_query_sum (DBDatabase* self, const gchar* table, const gchar* column, const gchar* where);
gpointer db_database_fetch_entity (DBDatabase* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* table, const gchar* where, gboolean recursive);
gpointer db_database_fetch_entity_by_id (DBDatabase* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gint64 id, const gchar* table, gboolean recursive);
GType db_entity_get_type (void) G_GNUC_CONST;
DBEntity* db_database_make_entity_full (DBDatabase* self, GType type, gint n_fields, gchar** fields, gchar** values, gboolean recursive);
gpointer db_database_make_entity (DBDatabase* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gint n_fields, gchar** fields, gchar** values, gboolean recursive);
GeeList* db_database_fetch_entity_list_full (DBDatabase* self, GType type, const gchar* table, const gchar* where, const gchar* order_by, gint limit, gboolean recursive);
GeeList* db_database_fetch_entity_list (DBDatabase* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* table, const gchar* where, const gchar* order_by, gint limit, gboolean recursive);
GeeMap* db_database_fetch_int_entity_map (DBDatabase* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* table, const gchar* key_field, const gchar* where);
void db_database_delete_entity (DBDatabase* self, const gchar* table, const gchar* where);
void db_database_persist (DBDatabase* self, DBEntity* entity);
GType db_sq_lite_database_get_type (void) G_GNUC_CONST;
DBSQLiteDatabase* db_sq_lite_database_new (const gchar* _path);
DBSQLiteDatabase* db_sq_lite_database_construct (GType object_type, const gchar* _path);
const gchar* db_sq_lite_database_get_path (DBSQLiteDatabase* self);
void db_sq_lite_database_set_path (DBSQLiteDatabase* self, const gchar* value);
const gchar* db_entity_db_table (DBEntity* self);
gchar** db_entity_db_keys (DBEntity* self, int* result_length1);
gchar** db_entity_db_fields (DBEntity* self, int* result_length1);
void db_entity_persist (DBEntity* self);
void db_entity_remove (DBEntity* self);
DBEntity* db_entity_construct (GType object_type);
DBDatabase* db_entity_get_db (DBEntity* self);
void db_entity_set_db (DBEntity* self, DBDatabase* value);
GType db_simple_entity_get_type (void) G_GNUC_CONST;
DBSimpleEntity* db_simple_entity_construct (GType object_type);
gint64 db_simple_entity_get_id (DBSimpleEntity* self);
void db_simple_entity_set_id (DBSimpleEntity* self, gint64 value);


G_END_DECLS

#endif
